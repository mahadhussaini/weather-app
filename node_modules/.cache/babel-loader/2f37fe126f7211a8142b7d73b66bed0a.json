{"ast":null,"code":"'use client'; // do not remove the following import (https://github.com/microsoft/TypeScript/issues/29808#issuecomment-1320713018)\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n// @ts-ignore\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';\nimport styleFunctionSx from '@mui/system/styleFunctionSx';\nimport experimental_extendTheme from './experimental_extendTheme';\nimport createTypography from './createTypography';\nimport excludeVariablesFromRoot from './excludeVariablesFromRoot';\nimport THEME_ID from './identifier';\nimport { defaultConfig } from '../InitColorSchemeScript/InitColorSchemeScript';\nconst defaultTheme = experimental_extendTheme();\nconst {\n  CssVarsProvider,\n  useColorScheme,\n  getInitColorSchemeScript: getInitColorSchemeScriptSystem\n} = createCssVarsProvider({\n  themeId: THEME_ID,\n  theme: defaultTheme,\n  attribute: defaultConfig.attribute,\n  colorSchemeStorageKey: defaultConfig.colorSchemeStorageKey,\n  modeStorageKey: defaultConfig.modeStorageKey,\n  defaultColorScheme: {\n    light: defaultConfig.defaultLightColorScheme,\n    dark: defaultConfig.defaultDarkColorScheme\n  },\n  resolveTheme: theme => {\n    const newTheme = _extends({}, theme, {\n      typography: createTypography(theme.palette, theme.typography)\n    });\n\n    newTheme.unstable_sx = function sx(props) {\n      return styleFunctionSx({\n        sx: props,\n        theme: this\n      });\n    };\n\n    return newTheme;\n  },\n  excludeVariablesFromRoot\n});\n/**\n * @deprecated Use `InitColorSchemeScript` instead\n * ```diff\n * - import { getInitColorSchemeScript } from '@mui/material/styles';\n * + import InitColorSchemeScript from '@mui/material/InitColorSchemeScript';\n *\n * - getInitColorSchemeScript();\n * + <InitColorSchemeScript />;\n * ```\n */\n\nexport const getInitColorSchemeScript = getInitColorSchemeScriptSystem;\nexport { useColorScheme, CssVarsProvider as Experimental_CssVarsProvider };","map":{"version":3,"names":["_extends","unstable_createCssVarsProvider","createCssVarsProvider","styleFunctionSx","experimental_extendTheme","createTypography","excludeVariablesFromRoot","THEME_ID","defaultConfig","defaultTheme","CssVarsProvider","useColorScheme","getInitColorSchemeScript","getInitColorSchemeScriptSystem","themeId","theme","attribute","colorSchemeStorageKey","modeStorageKey","defaultColorScheme","light","defaultLightColorScheme","dark","defaultDarkColorScheme","resolveTheme","newTheme","typography","palette","unstable_sx","sx","props","Experimental_CssVarsProvider"],"sources":["D:/react-projects/weather-app/node_modules/@mui/material/styles/CssVarsProvider.js"],"sourcesContent":["'use client';\n\n// do not remove the following import (https://github.com/microsoft/TypeScript/issues/29808#issuecomment-1320713018)\n/* eslint-disable @typescript-eslint/no-unused-vars */\n// @ts-ignore\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { unstable_createCssVarsProvider as createCssVarsProvider } from '@mui/system';\nimport styleFunctionSx from '@mui/system/styleFunctionSx';\nimport experimental_extendTheme from './experimental_extendTheme';\nimport createTypography from './createTypography';\nimport excludeVariablesFromRoot from './excludeVariablesFromRoot';\nimport THEME_ID from './identifier';\nimport { defaultConfig } from '../InitColorSchemeScript/InitColorSchemeScript';\nconst defaultTheme = experimental_extendTheme();\nconst {\n  CssVarsProvider,\n  useColorScheme,\n  getInitColorSchemeScript: getInitColorSchemeScriptSystem\n} = createCssVarsProvider({\n  themeId: THEME_ID,\n  theme: defaultTheme,\n  attribute: defaultConfig.attribute,\n  colorSchemeStorageKey: defaultConfig.colorSchemeStorageKey,\n  modeStorageKey: defaultConfig.modeStorageKey,\n  defaultColorScheme: {\n    light: defaultConfig.defaultLightColorScheme,\n    dark: defaultConfig.defaultDarkColorScheme\n  },\n  resolveTheme: theme => {\n    const newTheme = _extends({}, theme, {\n      typography: createTypography(theme.palette, theme.typography)\n    });\n    newTheme.unstable_sx = function sx(props) {\n      return styleFunctionSx({\n        sx: props,\n        theme: this\n      });\n    };\n    return newTheme;\n  },\n  excludeVariablesFromRoot\n});\n\n/**\n * @deprecated Use `InitColorSchemeScript` instead\n * ```diff\n * - import { getInitColorSchemeScript } from '@mui/material/styles';\n * + import InitColorSchemeScript from '@mui/material/InitColorSchemeScript';\n *\n * - getInitColorSchemeScript();\n * + <InitColorSchemeScript />;\n * ```\n */\nexport const getInitColorSchemeScript = getInitColorSchemeScriptSystem;\nexport { useColorScheme, CssVarsProvider as Experimental_CssVarsProvider };"],"mappings":"AAAA,a,CAEA;;AACA;AACA;;AACA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SAASC,8BAA8B,IAAIC,qBAA3C,QAAwE,aAAxE;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAASC,aAAT,QAA8B,gDAA9B;AACA,MAAMC,YAAY,GAAGL,wBAAwB,EAA7C;AACA,MAAM;EACJM,eADI;EAEJC,cAFI;EAGJC,wBAAwB,EAAEC;AAHtB,IAIFX,qBAAqB,CAAC;EACxBY,OAAO,EAAEP,QADe;EAExBQ,KAAK,EAAEN,YAFiB;EAGxBO,SAAS,EAAER,aAAa,CAACQ,SAHD;EAIxBC,qBAAqB,EAAET,aAAa,CAACS,qBAJb;EAKxBC,cAAc,EAAEV,aAAa,CAACU,cALN;EAMxBC,kBAAkB,EAAE;IAClBC,KAAK,EAAEZ,aAAa,CAACa,uBADH;IAElBC,IAAI,EAAEd,aAAa,CAACe;EAFF,CANI;EAUxBC,YAAY,EAAET,KAAK,IAAI;IACrB,MAAMU,QAAQ,GAAGzB,QAAQ,CAAC,EAAD,EAAKe,KAAL,EAAY;MACnCW,UAAU,EAAErB,gBAAgB,CAACU,KAAK,CAACY,OAAP,EAAgBZ,KAAK,CAACW,UAAtB;IADO,CAAZ,CAAzB;;IAGAD,QAAQ,CAACG,WAAT,GAAuB,SAASC,EAAT,CAAYC,KAAZ,EAAmB;MACxC,OAAO3B,eAAe,CAAC;QACrB0B,EAAE,EAAEC,KADiB;QAErBf,KAAK,EAAE;MAFc,CAAD,CAAtB;IAID,CALD;;IAMA,OAAOU,QAAP;EACD,CArBuB;EAsBxBnB;AAtBwB,CAAD,CAJzB;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,wBAAwB,GAAGC,8BAAjC;AACP,SAASF,cAAT,EAAyBD,eAAe,IAAIqB,4BAA5C"},"metadata":{},"sourceType":"module"}